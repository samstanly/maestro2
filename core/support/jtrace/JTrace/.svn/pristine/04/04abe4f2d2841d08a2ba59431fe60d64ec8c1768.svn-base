package jmiolotrace;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashMap;

public class Preferences {

	private static LinkedHashMap<String, String> Tabs;
	private static LinkedHashMap<String, String> DefaultTabs;

	Preferences() {
		initDefaultTabs();
		Tabs = new LinkedHashMap<String, String>();
		try {
			BufferedReader br = new BufferedReader(new FileReader(
					"preferences.txt"));
			StringBuilder sb = new StringBuilder();
			String line = br.readLine();
			while (line != null) {
				sb.append(line);
				sb.append("\n");
				line = br.readLine();
			}
			if (sb.toString().isEmpty()){
				String[] reset = {"reset"}; 
				setChoiceTabs(reset);				
			}
			else {
				String[] lines = sb.toString().split("\n");
				for (String l : lines) {
					String[] tab = l.split(" ");
					Tabs.put(tab[0], tab[1]);
				}
			}
		} catch (Exception e) {
			System.out.println(e.toString());
		}
	}

	private void initDefaultTabs() {
		DefaultTabs = new LinkedHashMap<String, String>();
		DefaultTabs.put("Todas", "1");
		DefaultTabs.put("Busca", "1");
		DefaultTabs.put("Trace", "1");
		DefaultTabs.put("Uses", "1");
		DefaultTabs.put("SQL", "1");
		DefaultTabs.put("Login", "1");
		DefaultTabs.put("Handler", "1");
		DefaultTabs.put("Profile", "1");
		DefaultTabs.put("Error", "1");
		DefaultTabs.put("Custom", "1");
	}

	public LinkedHashMap<String, String> getDefaultTabs() {
		return DefaultTabs;
	}
	
	public LinkedHashMap<String, String> getTabs() {
		return Tabs;
	}

	public void setChoiceTabs(String[] tabs) {
		String result = "";
		try {
			FileWriter fstream = new FileWriter("preferences.txt", false);
			if (tabs[0].equals("reset")) {
				for (String tab : DefaultTabs.keySet()) {
					result += tab + " 1\n";
				}
			} else {				
				for (String tab : Tabs.keySet()) {
					if (Arrays.asList(tabs).contains(tab)) {
						result += tab + " 1\n";
					} else {
						result += tab + " 0\n";
					}
				}
			}
			BufferedWriter out = new BufferedWriter(fstream);
			out.write(result);
			out.close();
			restart();
		} catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
		}
	}

	public void newCustom(String custom) {
		try {
			FileWriter fstream = new FileWriter("preferences.txt", true);
			String newTab = custom + " 1\n";
			BufferedWriter out = new BufferedWriter(fstream);
			out.write(newTab);
			out.close();
			restart();
		} catch (Exception e) {
			System.err.println("Error: " + e.getMessage());
		}
	}

	public ArrayList<String> getChoiceTabs() {
		ArrayList<String> tabs = new ArrayList<String>();
		for (String tab : Tabs.keySet()) {			
			if (Tabs.get(tab).equals("1")) {
				tabs.add(tab);				
			}
		}		
		return tabs;
	}

	public static void restart() {
		File currentJar = null;
		final String javaBin = System.getProperty("java.home") + File.separator
				+ "bin" + File.separator + "java";
		try {
			currentJar = new File(MainPanel.class.getProtectionDomain()
					.getCodeSource().getLocation().toURI());
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		/* is it a jar file? */
		if (!currentJar.getName().endsWith(".jar"))
			return;

		/* Build command: java -jar application.jar */
		final ArrayList<String> command = new ArrayList<String>();
		command.add(javaBin);
		command.add("-jar");
		command.add(currentJar.getPath());

		final ProcessBuilder builder = new ProcessBuilder(command);
		try {
			builder.start();
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		System.exit(0);
	}
}
